;+
; NAME:
;   HJD2BJD
; PURPOSE:
;   Converts a Heliocentric Julian Date in Coordinated Universal Time
;   (HJD_UTC) to Barycentric Julian Date in Barycentric Dynamical Time
;   (BJD_TDB) from anywhere on Earth or anywhere for which HORIZONS can
;   generate an ephemeris. Uses the plane parallel approximation
;   unless TARGET is specified and an ephemeris can be generated by
;   HORIZONS for it (in general not a good approximation for objects
;   in the Solar System).
;
; CALLING SEQUENCE
;   BJD_TDB = HJD2BJD(hjd_utc, ra, dec 
;                    [,lat=lat, lon=lon, elevation=elevation,
;                    earthobs=obsname, spaceobs=spaceobs, tbase=tbase, 
;                    /1950, /TIME_DIFF, /TT_IN])
;
; INPUTS:
;   HJD_UTC    - A scalar or array of HJDs (in UTC). Must be double
;                precision. 
;                NOTE: If the keyword TT_IN is set, must be an
;                array of HJDs in TT.
;                HJD_TT ~ HJD_UTC + 32.184 + N
;                where N is the number of leap seconds since 1961.
;   RA/DEC     - A scalar specifying the Right Ascension and
;                Declinatoin of the object, in decimal degrees. J2000
;                is assumed unless /B1950 is set
;   
; OPTIONAL INPUTS:
;   SPACEOBS   - A string input to HORIZONS specifying the space based
;                observatory. Can be anything for which HORIZONS can
;                generate an ephemeris. If set,
;                EARTHOBS/LAT/LON/ELEVATION are ignored. 
;                http://www-int.stsci.edu/~sontag/spicedocs/req/naif_ids.html
;                The name must be unique, or the telnet session will fail.
;                NOTE: a file called SPACEOBS.bary.eph will be generated.
;   EARTHOBS   - A string input to OBSERVATORY.PRO that specifies an
;                observatory. If set, LAT/LON/ELEVATION are ignored.
;   LAT/LON    - The latitude and longitude of the observatory, in
;                decimal degrees. Positive longitude is *East*. If
;                LAT/LON and OBSNAME are not specified, the geocenter
;                will be assumed and the resultant accuracy will be
;                ~20 ms. If OBSNAME is set, these are ignored.
;   ELEVATION  - The elevation of the observatory, in meters. If
;                LAT/LON are not set, or if OBSNAME is set, this will
;                be ignored. Sea level is assumed if not given.
;   TARGET     - A string input to HORIZONS specifying the Solar
;                System target of observation. Can be anything for
;                which HORIZONS can generate an ephemeris. If set,
;                RA/DEC are ignored.
;                The name must be unique, or the telnet session will fail.
;                NOTE: a file called TARGET.bary.eph will be generated.
;   PATH       - The path to the ephemeris files generated by
;                HORIZONS. Current directory assumed if not specified.
;   TBASE      - A scalar or n_elements(JD) vector that is the
;                baseline subtracted from the input JDs. For highest
;                precision, TBASE = floor(jd) is recommended
;   BIPMFILE   - The name of a file containing the BIPM-TAI
;                offsets from ftp://tai.bipm.org/TFG/TT%28BIPM%29/
;                Note that the previous year's file should be
;                downloaded, and the .ext file should be concatenated
;                at the end. As of 2010, this would be the TTBIPM.09
;                and TTBIPM09.ext files. This is only necessary for
;                30 us precision.
;   DISTANCE   - The distance from the observer to the target, in
;                Parsecs. If given, this will apply the second order
;                term to the roemer delay which is accurate to at
;                least 10^-14 seconds for any object outside the Solar
;                System. The plane parallel approximation is accurate
;                to at least 1 ms for any object outside the SS.
;
; OPTIONAL KEYWORDS:
;   B1950      - If set, the input coordinates are assumed to be in equinox 
;                B1950 coordinates. Default is the J2000 equinox.
;   TIME_DIFF  - To return the difference in seconds instead (either
;                to have the offset or for higher precision), use this
;                keyword. 
;                TDB = jd_utc + utc2bjd(jd_utc,ra,dec,/time_diff)/86400.d0
;   TT_IN      - Set this keyword to use JD_TT as an input
;                instead. This will skip the check for leap second
;                updates and assume you have done this already
;   USE_EOP    - Use EOP data for high precision nutation angles. This
;                is required for times more precise than 1 us. If set,
;                you must have Craig Markwardt's EOPDATA, retrieve
;                this file:
;                ftp://maia.usno.navy.mil/ser7/finals.all
;                and save it as $ASTRO_DATA/iers_final_a.dat
;                This file must be kept up-to-date.
;
; OUTPUTS:
;   BJD_TDB     - The light travel time corrected, Barycentric
;                 Dynamical Time (TDB) in BJD for each given UTC. If
;                 /TIME_DIFF is set, then returns the time difference
;                 in seconds.
;                TDB = utc2bjd(jd_utc,ra,dec)
;                BJD_TDB-JD_UTC = utc2bjd(jd_utc,ra,dec,/time_diff)
; 
; DESCRIPTION:
;   TDB time is the current time standard (as of 2010). This routine
;   follows the procedure here:
;   http://lheawww.gsfc.nasa.gov/users/craigm/bary/
;   but ignores the dispersion correction. BJD_TDB is defined:
;   BJD_TDB = TOBS + GEOMETRIC + CLOCK + EINSTEIN - SHAPIRO
;
;   where
;
;     TOBS      - the observed JD in UTC of the event on Earth
;     GEOMETRIC - the light travel time from your position on earth to
;                 the barycenter of the solar system (~300 s)
;     CLOCK     - the correction from input time to TDB time
;     EINSTEIN  - the relativistic correction due to using the earth
;                 as your inertial frame (~1 ms)
;     SHAPIRO   - the time delay due to photon bending in the
;                 potential of the solar system (~1 us)
;
;   *** PLEASE READ THE FOLLOWING NOTES ABOUT ACCURACY CAREFULLY ***
;
;   NOTES (in order of accuracy of result):
;
;   This routine transparently handles the conversion from UTC to TDB.
;   Using TT will produce a systematic offset equal to the number of
;   leapseconds required plus 32.184 seconds, unless the TT_IN keyword
;   is set (66.184 seconds in 2009). 
;
;   HELIO_JD.PRO, BARYCEN.PRO, and many routines that calculate the
;   position of astronomical objects assume the input "JD" is "JD_TT",
;   a critical assumption that is not obvious to users unfamiliar with
;   the complexities of precision timing. This has likely led to the
;   fact that the term "BJD" has been used in the literature to mean
;   both "BJD_UTC" and "BJD_TT" (similarly for "HJD"), which differ by
;   ~1 minute! BJD_UTC and HJD_UTC are not continous, uniformly
;   increasing timescales and should never be used in astronomy.
;
;   Leap seconds are added unpredictably every ~1 year. A current file
;   is vital for ~1 second accuracy. This program will wget an updated
;   file the first time it runs after every January 1st and July 1st
;   (when leap seconds are added). Therefore wget and an internet
;   connection are required to use JD_UTC as an input. If wget fails,
;   you can manually retrieve it from
;   ftp://maia.usno.navy.mil/ser7/tai-utc.dat and put it in
;   $ASTRO_DATA. You'll also have to update
;   $ASTRO_DATA/exofast_lastupdate to have the current JD_UTC so this
;   program knows the leap seconds are up to date. To skip this step
;   altogether, input JD_TT and set the TT_IN keyword.
;
;   UTC and UT1 may differ by as much as 0.9s (the difference between
;   "delta t" and leap seconds + 32.184), and both may be called
;   UT. UTC is returned by NTP servers, and is usually the value
;   recorded in image headers, but this should be verified if UT is
;   specified.
;
;   For it to take into account your position on the earth, LAT and
;   LON, or OBSNAME must be specified. If none of these are set, the
;   assumed position is the center of the earth, and the results will
;   be systematically offset by 8-21.3 ms (observation bias). This
;   correction agrees with naive estimates (spherical earth at noon on
;   the winter solstice at -23.5 degrees latitude and 0 longitude) to
;   2 ms. Based on this and a handful of similar tests, this program
;   is believed to accurately implement Craig Marquardt's routines,
;   which are reported to be limited by the GPS coordinates of your
;   observatory.
;
;   For 1 ms accuracy, double precision cannot hold the full
;   JD. TBASE=floor(jd) should be used.
;
;   For accuracies to 30 us, TT(BIPM) must be used instead of TT(TAI)
;   = UTC + 32.184 + N. This is calculated ~1 month after the fact and
;   is available here: ftp://tai.bipm.org/TFG/TT(BIPM)
;   /TT_IN should be specified.
;
;   ELEVATION or OBSNAME should be set to account for the light travel
;   time to your elevation. If not set, the elevation is assumed to be
;   at sea level and results will be accurate to ~10 us.
;
;   USE_EOP data must be set (and the file must be kept up to date)
;   for accuracies beyond 1 us.
;
;   ****************************************************************
;   ****The accuracy beyond this has not been thoroughly tested.****
;   ***any accuracy beyond 1 us should be independently verified.***
;   ****************************************************************
;
;   For ~100 ns accuracy, days cannot hold the precision. The
;   correction should be returned in seconds using the /TIME_DIFF
;   keyword and applied carefully.
;
;   For better than ~30 ns, the corrections are limited by the
;   imperfect knowledge of your location with respect to the center of
;   the earth (~10 m). A slight modification of this code to use ITRF
;   measurements of your position on earth (ie from VLBI) will be
;   required. Further verification of this routine at that level is
;   strongly recommended, and heroic measures to ensure double
;   precision is adequate may be required.
;
;   Also note the TT to TDB correction uses the 791-term Fairhead &
;   Bretagnon analytical approximation which has a maximum error of 23
;   ns and rms error of 14 ns in the time range 1980-2000, compared to
;   a numerical integration.
;
; DEPENDENCIES:
;   IDL astronomy library
;
;   wget and an internet connection (to update the leap second file)
;   alternatively, the $ASTRO_DATA/tai-utc.dat can be manually updated
;   and $ASTRO_DATA/exofast_lastupdate can be manually edited to
;   contain the JD_UTC of the manual update. Note this only happens
;   the first time it is run after every Jan 1st and Jul 1st.
;
;   an environment variable "ASTRO_DATA", which specifies that path to
;   JPLEPH.405, which can be found here:
;   http://www.physics.wisc.edu/~craigm/idl/down/JPLEPH.405
;   NOTE: tai-utc.dat and exofast_lastupdate will be placed in
;   $ASTRO_DATA too.
;   For manual updates, tai-utc.dat can be found here:
;   ftp://maia.usno.navy.mil/ser7/tai-utc.dat
;
;   If making use of HORIZONS ephemerides (for spacecraft observatories
;   or SS targets), you need Expect, telnet, and horizons.exp in your path.
;
;   Craig Markwardt's routines:
;   http://www.physics.wisc.edu/~craigm/idl/down/
;   TAI_UTC
;   (for earth position correction)
;   HPRSTATN HPRNUTANG QTEULER QTCOMPOSE QTMULT QTVROT EOPDATA
;
; REVISION HISTORY:
; 2010/05/12:
;   Fixed bug in geodetic calculations. Added USE_EOP keyword. Now
;   accurate to < 1 us for anywhere on Earth. Added PATH keyword.
; 2010/04/27:
;   Automatic generation of ephemerides for non-earth-based observers/targets
;     NOTE: Requires "Expect" and "horizons.exp" in your path.
;   Computes spherical wavefront correction for SS targets
; 2010/04/08: Added TT_IN keyword
; 2009/12/10: Written by Jason Eastman (OSU)
; Based on BARYCEN.PRO by goehler -- major differences are:
;   uses JD_UTC as input (not MJD_TT). Automatically converts to
;   TT(TAI), and can convert to TT(BIPM) if given the table of
;   BIPM-TAI offsets (see notes). 
;   Indexes JPL ephemeris with JD_TDB, not JD_TT
;   automatically wgets of leap second file required to convert to TT
;   allows user settable TBASE for higher precision
;   uses your position on earth for higher precision (see notes)

function hjd2bjd, hjd_utc, ra, dec, B1950=b1950, DISTANCE=distance,$
                  SPACEOBS=spaceobs, EARTHOBS=earthobs, TARGET=target, $
                  LAT=lat, LON=lon, ELEVATION=elevation,STEPSIZE=stepsize,$
                  TBASE=tbase, TIME_DIFF=time_diff,TT_IN=TT_IN,$
                  bipmfile=bipmfile,USE_EOP=USE_EOP,PATH=path

;; recover JD in UTC from HJD (only accurate to ~1 second)
jd_utc = hjd_utc - helio_jd(hjd_utc - 2400000.d0,ra,dec,/time_diff)/86400.d0

;; now convert to BJD_TDB
bjd_tdb = utc2bjd(jd_utc,ra,dec, B1950=b1950, DISTANCE=distance,$
                  SPACEOBS=spaceobs, EARTHOBS=earthobs, TARGET=target, $
                  LAT=lat, LON=lon, ELEVATION=elevation,STEPSIZE=stepsize,$
                  TBASE=tbase, TIME_DIFF=time_diff,TT_IN=TT_IN,$
                  bipmfile=bipmfile,USE_EOP=USE_EOP,PATH=path) 

return, bjd_tdb

end
